buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
group = "commoble.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

sourceSets
{
	main
	test
	//api
}

minecraft {
    mappings channel: 'official', version: "${mappings_version}"    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                bagofyurting {
                    source sourceSets.main
                    //source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                bagofyurting {
                    source sourceSets.main
                    //source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'bagofyurting', '--all', '--output', file('src/generated/resources/')

            mods {
                bagofyurting {
                    source sourceSets.main
                    //source sourceSets.api
                }
            }
        }
    }
}

configurations
{
	apiCompile.extendsFrom(compile)
	debugCompile.extendsFrom(compile)
}

repositories {
  maven {
    // location of the maven that hosts JEI files
    name = "Progwml6 maven"
    url = "https://dvs1.progwml6.com/files/maven/"
  }
  maven {
    // location of a maven mirror for JEI files, as a fallback
    name = "ModMaven"
    url = "https://modmaven.k-4u.nl"
  }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    // implementation sourceSets.api.output
    /*
	// compile against the JEI API but do not include it at runtime
	compileOnly fg.deobf("mezz.jei:jei-${jei_branch}:${jei_version}:api")
	// at runtime, use the full JEI jar
	runtimeOnly fg.deobf("mezz.jei:jei-${jei_branch}:${jei_version}")
	*/
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	//from sourceSets.api.output
    manifest {
        attributes([
            "Specification-Title": "bagofyurting",
            "Specification-Vendor": "Commoble",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Commoble",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
	classifier = "sources"
	from sourceSets.main.allJava
	//from sourceSets.api.allJava
}
task apiJar(type: Jar) {
	classifier = "api"
	from sourceSets.main.output
	from sourceSets.main.allJava
	// exclude api internals from canonical public api
	include "commoble/bagofyurting/api/"
	exclude "commoble/bagofyurting/api/internal/"
}

// full production jar plus attached sources for debugging
task debugJar(type: Jar) {
	classifier = "debug"
	from sourceSets.main.output
	from sourceSets.main.allJava
	//from sourceSets.api.output
	//from sourceSets.api.allJava
	// if we use mixins, then we have to exclude this from the compileOnly dependency,
	// or mixins from this mod don't apply when we run the depending mod, weirdly
	// exclude "META-INF/mods.toml"
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives apiJar
	archives debugJar
}

// run "gradlew build publish" to build jars and generate a maven repo for them
// run "gradlew build" to build the jars without mavening them
publishing {
    publications {
        mavenJava(MavenPublication) {
			artifactId project.archivesBaseName
            artifact jar
			artifact apiJar
			artifact sourcesJar
			artifact javadocJar
			artifact debugJar
        }
    }
    repositories {
        maven {
			name="localMaven"
            url "file:///${project.projectDir}/maven"
        }
    }
}